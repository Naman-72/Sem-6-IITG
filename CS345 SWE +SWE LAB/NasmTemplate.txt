%macro exit 0
	mov rax,SYS_EXIT
	mov rdi,0
	syscall
%endmacro
;*******************************************************************************************************
%macro printdigit 1
	mov rax,%1
	call _printraxdigit
%endmacro
;*******************************************************************************************************
%macro printno 1 
    mov rax, %1
    call _printRAX
%endmacro
;*******************************************************************************************************
%macro printnaman 0
	call _printnaman
%endmacro
;*******************************************************************************************************
%macro printstring 1
	mov rax,%1
	mov rbx,0
 	call findlen
 	mov rdx,[len]
 	mov rax,1
 	mov rdi,1
 	mov rsi,%1
 	syscall
%endmacro
;*******************************************************************************************************

section .data
	digit db 0,10
	text1 db "Naman",10

	STDIN equ 0
	STDOUT equ 1
	STDERR equ 2
	SYS_WRITE equ 1
	SYS_READ equ 2
	SYS_EXIT equ 60

;*******************************************************************************************************

section .bss
    digitSpace resb 100
    digitSpacePos resb 8
    len : resd 1

;*******************************************************************************************************

section .text 
	global _start
_start :
	
	exit
;*******************************************************************************************************
_printnaman :
	mov rax,1
	mov rdi,1
	mov rsi,text1
	mov rdx,6
	syscall 
	ret
;*******************************************************************************************************
findlen :
	mov rbx,0
_loop : 
	inc rbx
	inc rax
	cmp byte[rax],0
	jne _loop
	mov [len],rbx
	ret
;*******************************************************************************************************
_printraxdigit :
	add rax,48
	mov [digit],al
	mov rax,1
	mov rdi,1
	mov rsi,digit
	mov rdx,2
	syscall
	ret	
;******************************************************************************************************* 
_printRAX:
    mov rcx, digitSpace
    mov rbx, 10
    mov [rcx], rbx
    inc rcx
    mov [digitSpacePos], rcx
 
_printRAXLoop:
    mov rdx, 0
    mov rbx, 10
    div rbx
    push rax
    add rdx, 48
 
    mov rcx, [digitSpacePos]
    mov [rcx], dl
    inc rcx
    mov [digitSpacePos], rcx
    
    pop rax
    cmp rax, 0
    jne _printRAXLoop
 
_printRAXLoop2:
    mov rcx, [digitSpacePos] 
    mov rax, 1
    mov rdi, 1
    mov rsi, rcx
    mov rdx, 1
    syscall
    mov rcx, [digitSpacePos]
    dec rcx
    mov [digitSpacePos], rcx
    cmp rcx, digitSpace
    jge _printRAXLoop2
    ret
