Running Programs 
**************************************************************************************************************************************
%macro exit 0
	mov rax,SYS_EXIT
	mov rdi,0
	syscall
%endmacro


%macro printno 1 
    mov rax, %1
    call _printRAX
%endmacro


%macro printdigit 1
	mov rax,%1
	call _printraxdigit
%endmacro


%macro printnaman 0
	call _printnaman
%endmacro
	


%macro printstring 1
	mov rax,%1
	mov rbx,0
 	call findlen
 	mov rdx,[len]
 	mov rax,1
 	mov rdi,1
 	mov rsi,%1
 	syscall
%endmacro

section .data
	digit db 0,10
	text1 db "Naman",10

	STDIN equ 0
	STDOUT equ 1
	STDERR equ 2
	SYS_WRITE equ 1
	SYS_READ equ 2
	SYS_EXIT equ 60
	
	textr1c1 db "Enter Value for 1st Row 1st Col : ",10,0
	textr1c2 db "Enter Value for 1st Row 2nd Col : ",10,0
	textr1c3 db "Enter Value for 1st Row 3rd Col : ",10,0
	textr1c4 db "Enter Value for 1st Row 4th Col : ",10,0
	textr2c1 db "Enter Value for 2nd Row 1st Col : ",10,0
	textr2c2 db "Enter Value for 2nd Row 2nd Col : ",10,0
	textr2c3 db "Enter Value for 2nd Row 3rd Col : ",10,0
	textr2c4 db "Enter Value for 2nd Row 4th Col : ",10,0
	textr3c1 db "Enter Value for 3rd Row 1st Col : ",10,0
	textr3c2 db "Enter Value for 3rd Row 2nd Col : ",10,0
	textr3c3 db "Enter Value for 3rd Row 3rd Col : ",10,0
	textr3c4 db "Enter Value for 3rd Row 4th Col : ",10,0
	textr4c1 db "Enter Value for 4th Row 1st Col : ",10,0
	textr4c2 db "Enter Value for 4th Row 2nd Col : ",10,0
	textr4c3 db "Enter Value for 4th Row 3rd Col : ",10,0
	textr4c4 db "Enter Value for 4th Row 4th Col : ",10,0


section .bss
    digitSpace resb 100
    digitSpacePos resb 8
    r1c1 resd 1
    r1c2 resd 1
    r1c3 resd 1
    r1c4 resd 1
    r2c1 resd 1
    r2c2 resd 1
    r2c3 resd 1
    r2c4 resd 1
    r3c1 resd 1
    r3c2 resd 1
    r3c3 resd 1
    r3c4 resd 1
    r4c1 resd 1
    r4c2 resd 1
    r4c3 resd 1
    r4c4 resd 1
    len : resd 1

section .text 
	global _start
_start :
	printno 492
	call _printnaman
	printdigit 9
	mov r11, textr1c1
	printstring r11
	exit
	

findlen :
	mov rbx,0
_loop : 
	inc rbx
	inc rax
	cmp byte[rax],0
	jne _loop
	mov [len],rbx
	ret
	
matrixmultiplyone :
	
	ret

; **************************************For Debugging**************************************


_printnaman :
	mov rax,1
	mov rdi,1
	mov rsi,text1
	mov rdx,6
	syscall 
	ret


; **************************************PRINTING Single Digit**************************************
	
_printraxdigit :
	add rax,48
	mov [digit],al
	mov rax,1
	mov rdi,1
	mov rsi,digit
	mov rdx,2
	syscall
	ret	
; **************************************PRINTING INTEGER**************************************

 
_printRAX:
    mov rcx, digitSpace
    mov rbx, 10
    mov [rcx], rbx
    inc rcx
    mov [digitSpacePos], rcx 
 

_printRAXLoop:
    mov rdx, 0
    mov rbx, 10
    div rbx
    push rax
    add rdx, 48
 
    mov rcx, [digitSpacePos]
    mov [rcx], dl
    inc rcx
    mov [digitSpacePos], rcx
    
    pop rax
    cmp rax, 0
    jne _printRAXLoop
 
_printRAXLoop2:
    mov rcx, [digitSpacePos] 
    mov rax, 1
    mov rdi, 1
    mov rsi, rcx
    mov rdx, 1
    syscall
    mov rcx, [digitSpacePos]
    dec rcx
    mov [digitSpacePos], rcx
    cmp rcx, digitSpace
    jge _printRAXLoop2
    ret

**************************************************************************************************************************************
Printing Digit Macro 
;MACRO
;%macro <name> <no of args>
;<body>
;%endmacro

%macro exit 0
	mov rax,60
	mov rdi,0
	syscall
%endmacro

%macro printdigit 1
	mov rax,%1
	call _printraxdigit
%endmacro
	
section .data
	digit db 0,10
	text1 db "Naman",10
section .bss
section .text
	global _start
_start :
	printdigit 9
	call _printnaman
	exit
	
_printnaman :
	mov rax,1
	mov rdi,1
	mov rsi,text1
	mov rdx,6
	syscall 
	ret
	
_printraxdigit :
	add rax,48
	mov [digit],al
	mov rax,1
	mov rdi,1
	mov rsi,digit
	mov rdx,2
	syscall
	ret	
**************************************************************************************************************************************
; display a digit between 0 and 9
; digit it display come from rax reg

section .data
	digit db 0,10
	text1 db "Naman",10
	; 2 bytes 0 and 10
	; al : take least significant
section .bss
section .text
	global _start
_start :
	mov rax,5
	call _printraxdigit
	call _n	
	; NOte IMP Floating point exception (core dumped) SINC3 RDX:RAX IS DIVIDED
	mov rdx,0
	mov rax,8
	mov rbx,2
	div rbx
	call _printraxdigit
	mov rax,60
	mov rdi,0
	syscall 
	
_n :
	mov rax,1
	mov rdi,1
	mov rsi,text1
	mov rdx,6
	syscall 
	ret
	
_printraxdigit :
	add rax,48
	mov [digit],al
	mov rax,1
	mov rdi,1
	mov rsi,digit
	mov rdx,2
	syscall
	ret
**************************************************************************************************************************************
Taking Input :
section .data
	text1 : db "Hello What is Your Name? ",0
	text2 : db "Hello, ",0
section .bss
	name resb 20
section .text
	global _start
_start :
	call printtext1
	call takeinput
	call printinput
	
	mov rax,60
	mov rdi,0
	syscall

printtext1 :
	mov rax,1
	mov rdi,1
	mov rsi,text1
	mov r10,0
	call findlen
	mov rdx,r10
	syscall
	ret

takeinput :
	mov rax,0
	mov rdi,0
	mov rsi,name
	mov rdx,20
	syscall
	ret

printtext2 :
	mov rax,1
	mov rdi,1
	mov rsi,text2
	mov r10,0
	call findlen
	mov rdx,r10
	syscall
	ret

printinput :
	mov rax,1
	mov rdi,1
	mov rsi,name
	mov rdx,20
	syscall
	ret
	
findlen :
	inc r10
	cmp byte[text1+r10],0
	jne findlen
	ret
	
**************************************************************************************************************************************
**************************************************************************************************************************************

FINDING LENGHT OF STRING : 

; Define variables in the data section
SECTION .data
	hello:     db 'Hello world!',10,0
	
SECTION .bss
	hellolen : resd 1

; Code goes in the text section
SECTION .text
	GLOBAL _start 

_start:
	mov rbx,0
	call findlen

findlen :
	inc rbx
	cmp byte[hello+rbx],0
	jne findlen
	
	mov rax,4            ; 'write' system call = 4
	mov qword[hellolen],rbx
	mov rbx,1            ; file descriptor 1 = STDOUT
	mov rcx,hello        ; string to write
	dec qword[hellolen]
	mov rdx,qword[hellolen]     ; length of string to write
	int 80h              ; call the kernel

	; Terminate program
	mov rax,1            ; 'exit' system call
	mov rbx,0            ; exit with error code 0
	int 80h              ; call the kernel
**************************************************************************************************************************************
**************************************************************************************************************************************
; Define variables in the data section
SECTION .data
	hello:     db 'Hello world!',10
	helloLen:  dd 13

; Code goes in the text section
SECTION .text
	GLOBAL _start 

_start:
	mov eax,4            ; 'write' system call = 4
	mov ebx,1            ; file descriptor 1 = STDOUT
	mov ecx,hello        ; string to write
	mov edx,[helloLen]     ; length of string to write
	int 80h              ; call the kernel

	; Terminate program
	mov eax,1            ; 'exit' system call
	mov ebx,0            ; exit with error code 0
	int 80h              ; call the kernel

**************************************************************************************************************************************
**************************************************************************************************************************************

          global    _start

          section   .text
_start:   mov       rax, 1                  ; system call for write
          mov       rdi, 1                  ; file handle 1 is stdout
          mov       rsi, message            ; address of string to output
          mov       rdx, 13                 ; number of bytes
          syscall                           ; invoke operating system to do the write
          mov       rax, 60                 ; system call for exit
          xor       rdi, rdi                ; exit code 0
          syscall                           ; invoke operating system to exit

          section   .data
message:  db        "Hello, World", 10      ; note the newline at the end

**************************************************************************************************************************************
**************************************************************************************************************************************
; Define variables in the data section
SECTION .data
	hello:     db 'Hello world!',10
	helloLen:  dd 13

; Code goes in the text section
SECTION .text
	GLOBAL _start 

_start:
	mov rax,4            ; 'write' system call = 4
	mov rbx,1            ; file descriptor 1 = STDOUT
	mov rcx,hello        ; string to write
	mov rdx,[helloLen]     ; length of string to write
	int 80h              ; call the kernel

	; Terminate program
	mov rax,1            ; 'exit' system call
	mov rbx,0            ; exit with error code 0
	int 80h              ; call the kernel